/* The `RegisterScreen` class is a React Native component that allows users to register for an app
using Firebase authentication and stores user information in a Firebase database. */
import React, { Component } from "react";
import {
  View,
  StyleSheet,
  SafeAreaView,
  Platform,
  StatusBar,
  Image,
  TextInput,
  Alert,
  TouchableOpacity,
  Text,
} from "react-native";

import firebase from "firebase";
/* The code is importing the `RFValue` function from the `react-native-responsive-fontsize`
library. This function is used to calculate font sizes that are responsive to different screen sizes
and resolutions. */
import { RFValue } from "react-native-responsive-fontsize";
import * as Font from "expo-font";

/* This code is importing the `SplashScreen` module from the `expo-splash-screen` library and using the
`preventAutoHideAsync()` method to prevent the app's splash screen from automatically hiding. This
is useful for cases where you want to ensure that certain tasks (such as loading fonts or data) are
completed before the splash screen disappears. Once these tasks are completed, the
`SplashScreen.hideAsync()` method can be used to hide the splash screen. */
import * as SplashScreen from "expo-splash-screen";
SplashScreen.preventAutoHideAsync();

/* `let customFonts` is declaring a variable that contains an object with a key-value pair. The key is
`"Bubblegum-Sans"` and the value is the result of calling the `require()` function to import a font
file located at `"../assets/fonts/BubblegumSans-Regular.ttf"`. This font file is then used in the
`LoginScreen` component to style text elements with the "Bubblegum-Sans" font family. */
let customFonts = {
  "Bubblegum-Sans": require("../assets/fonts/BubblegumSans-Regular.ttf"),
};

/* `const appIcon = require("../assets/logo.png");` is importing the image file `logo.png` from the
`assets` folder and assigning it to the variable `appIcon`. This variable is then used in the
`Image` component in the `render` method to display the app icon on the login screen. */
const appIcon = require("../assets/logo.png");

export default class RegisterScreen extends Component {
  /**
   * This is a constructor function that initializes the state of a component with empty strings for
   * first name, last name, email, password, and confirmPassword, as well as a boolean value for
   * fontsLoaded.
   * @param props - props is an object that contains all the properties passed to the component from
   * its parent component. It can include data, functions, and other values that are needed by the
   * component. In this case, the constructor is using props to initialize the state of the component.
   */
  constructor(props) {
    super(props);
    this.state = {
      first_name: "",
      last_name: "",
      email: "",
      password: "",
      confirmPassword: "",
      fontsLoaded: false,
    };
  }

  /* This code is loading custom fonts asynchronously using the `Font.loadAsync()` method from the
`expo-font` library. The `_loadFontsAsync()` function is declared as an asynchronous function that
waits for the fonts to be loaded before setting the `fontsLoaded` state to `true`. The
`componentDidMount()` lifecycle method is then calling the `_loadFontsAsync()` function to load the
fonts when the component mounts. This ensures that the custom fonts are loaded before they are used
in the component's `render()` method. */
  async _loadFontsAsync() {
    await Font.loadAsync(customFonts);
    this.setState({ fontsLoaded: true });
  }

  componentDidMount() {
    this._loadFontsAsync();
  }

  /* `registerUser` is a method that takes in five parameters: `email`, `password`, `confirmPassword`,
  `first_name`, and `last_name`. It first checks if the `password` and `confirmPassword` match. If
  they do, it uses Firebase authentication to create a new user with the provided `email` and
  `password`. If the user is successfully created, it displays an alert message saying "User
  registered!!", logs the user's unique ID to the console, navigates to the Login screen, and stores
  the user's `email`, `first_name`, `last_name`, and `current_theme` in a Firebase database under a
  node with the user's unique ID. If there is an error creating the user, it displays an alert
  message with the error message. If the `password` and `confirmPassword` do not match, it displays
  an alert message saying "Passwords don't match!". */
  registerUser = (email, password, confirmPassword, first_name, last_name) => {
    if (password == confirmPassword) {
      firebase
        .auth()
        .createUserWithEmailAndPassword(email, password)
        .then((userCredential) => {
          Alert.alert("User registered!!");
          /* `console.log(userCredential.user.uid);` is logging the
          unique ID of the newly registered user to the console.
          This ID is generated by Firebase authentication when a
          new user is created and is used to identify the user in
          the Firebase database. By logging this ID to the console,
          the developer can verify that the user was successfully
          registered and can use this ID to store additional
          information about the user in the database. */
          console.log(userCredential.user.uid);

          /* `this.props.navigation.replace("Login");` is a method call that navigates the user to the
          "Login" screen by replacing the current screen in the navigation stack with the "Login"
          screen. This means that the user cannot go back to the previous screen using the back
          button, as the previous screen has been removed from the stack. */
          this.props.navigation.replace("Login");

          /* This code is storing user information in a Firebase database under a node with the user's
          unique ID. It is using the `ref()` method to specify the location of the node in the
          database, which is `/users/` followed by the user's unique ID. It is then using the
          `set()` method to set the value of the node to an object containing the user's `email`,
          `first_name`, `last_name`, and `current_theme` properties. This allows the app to retrieve
          and display user information from the database when needed. */
          firebase
            .database()
            .ref("/users/" + userCredential.user.uid)
            .set({
              email: userCredential.user.email,
              first_name: first_name,
              last_name: last_name,
              current_theme: "dark",
            });
        })
        .catch((error) => {
          Alert.alert(error.message);
        });
    } else {
      Alert.alert("Passwords don't match!");
    }
  };

  render() {
    /* This code is checking if the custom fonts have finished loading by checking the `fontsLoaded`
   state. If the fonts have finished loading, it calls the `SplashScreen.hideAsync()` method to hide
   the app's splash screen. This ensures that the splash screen is only hidden once the custom fonts
   have finished loading and are ready to be used in the component's `render()` method. */
    if (this.state.fontsLoaded) {
      /* `SplashScreen.hideAsync();` is a method from the `expo-splash-screen` library that hides the
      app's splash screen. It is called in the `render()` method of the `RegisterScreen` component
      after checking if the custom fonts have finished loading. */
      SplashScreen.hideAsync();
      const { email, password, confirmPassword, first_name, last_name } =
        this.state;

      return (
        <View style={styles.container}>
          <SafeAreaView style={styles.droidSafeArea} />

          <Text style={styles.appTitleText}>Register</Text>

          <TextInput
            style={styles.textinput}
            onChangeText={(text) => this.setState({ first_name: text })}
            placeholder={"Enter First name"}
            placeholderTextColor={"#FFFFFF"}
          />

          <TextInput
            style={styles.textinput}
            onChangeText={(text) => this.setState({ last_name: text })}
            placeholder={"Enter Last name"}
            placeholderTextColor={"#FFFFFF"}
          />

          <TextInput
            style={styles.textinput}
            onChangeText={(text) => this.setState({ email: text })}
            placeholder={"Enter Email"}
            placeholderTextColor={"#FFFFFF"}
          />

          <TextInput
            style={styles.textinput}
            onChangeText={(text) => this.setState({ password: text })}
            placeholder={"Enter Password"}
            placeholderTextColor={"#FFFFFF"}
            secureTextEntry
          />

          <TextInput
            style={styles.textinput}
            onChangeText={(text) => this.setState({ confirmPassword: text })}
            placeholder={"Re-enter Password"}
            placeholderTextColor={"#FFFFFF"}
            secureTextEntry
          />

          {/* This code is creating a touchable opacity button with the text "Register" using the `Text`
          component and applying the `styles.button` and `styles.buttonText` styles to the button
          and text, respectively. When the button is pressed, it calls the `registerUser()` method
          with the `email`, `password`, `confirmPassword`, `first_name`, and `last_name` values from
          the component's state as arguments. The `registerUser()` method then checks if the
          `password` and `confirmPassword` match, and if they do, it uses Firebase authentication to
          create a new user with the provided `email` and `password`. If the user is successfully
          created, it displays an alert message saying "User registered!!", logs the user's unique
          ID to the console, navigates to the Login screen, and stores the user's `email`,
          `first_name`, `last_name`, and `current_theme` in a Firebase database under a node with
          the user's unique ID. If there is an error creating the user, it displays an alert message
          with the error message. If the `password` and `confirmPassword` do not match, it displays
          an alert message saying */}
          <TouchableOpacity
            style={[styles.button, { marginTop: 20 }]}
            onPress={() =>
              this.registerUser(
                email,
                password,
                confirmPassword,
                first_name,
                last_name
              )
            }
          >
            <Text style={styles.buttonText}>Register</Text>
          </TouchableOpacity>

          {/* This code is creating a touchable opacity button that, when pressed, navigates the user to
          the Login screen by calling the `replace()` method on the `navigation` prop passed to the
          component. The button displays the text "Login ?" using the `Text` component and applies
          the `styles.buttonTextNewUser` style to the text. */}
          <TouchableOpacity
            onPress={() => this.props.navigation.replace("LoginScreen")}
          >
            <Text style={styles.buttonTextNewUser}>Login ?</Text>
          </TouchableOpacity>
        </View>
      );
    }
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#15193c",
    alignItems: "center",
    justifyContent: "center",
  },
  /* The above code is defining a style object for a React Native component's safe area. It sets the
  `marginTop` property to either the height of the device's status bar (if the platform is Android)
  or to a specific value using the `RFValue` function (if the platform is not Android). This ensures
  that the component is positioned correctly within the safe area of the device's screen. */
  droidSafeArea: {
    marginTop:
      Platform.OS === "android" ? StatusBar.currentHeight : RFValue(35),
  },
  appIcon: {
    width: RFValue(200),
    height: RFValue(200),
    resizeMode: "contain",
    marginBottom: RFValue(20),
  },
  appTitleText: {
    color: "white",
    textAlign: "center",
    fontSize: RFValue(40),
    fontFamily: "Bubblegum-Sans",
    marginBottom: RFValue(20),
  },
  textinput: {
    width: RFValue(250),
    height: RFValue(40),
    padding: RFValue(10),
    marginTop: RFValue(10),
    borderColor: "#FFFFFF",
    borderWidth: RFValue(4),
    borderRadius: RFValue(10),
    fontSize: RFValue(15),
    color: "#FFFFFF",
    backgroundColor: "#15193c",
    fontFamily: "Bubblegum-Sans",
  },
  button: {
    width: RFValue(250),
    height: RFValue(50),
    flexDirection: "row",
    justifyContent: "space-evenly",
    alignItems: "center",
    borderRadius: RFValue(30),
    backgroundColor: "white",
    marginBottom: RFValue(20),
  },
  buttonText: {
    fontSize: RFValue(24),
    color: "#15193c",
    fontFamily: "Bubblegum-Sans",
  },
  buttonTextNewUser: {
    fontSize: RFValue(12),
    color: "#FFFFFF",
    fontFamily: "Bubblegum-Sans",
    textDecorationLine: "underline",
  },
});
